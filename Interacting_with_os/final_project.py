#!/usr/bin/env python3
import re
import operator
import csv

def logParsing():
    errors = {}
    usage = {}
    # parse through each log entry in the syslog.log file
    with open("Interacting_with_os\syslog.log") as file:
        for log in file.readlines():
            pattern = r"(ticky: )(ERROR|INFO )([\w ]*)(\([\w ]*\))"
            found_log = re.search(pattern, log)
            if found_log:
                log_type = found_log.group(2)
                log_message = found_log.group(3).strip()
                log_user = found_log.group(4).replace('(','').replace(')','')

                if log_type == 'ERROR':
                    if errors.get(log_message):
                        errors[log_message] += 1
                    else:
                        errors[log_message] = 1

                if usage.get(log_user):
                    usage_tuple = usage[log_user]
                    if log_type == 'ERROR':
                        usage[log_user] = (usage_tuple[0], usage_tuple[1]+1)
                    else:
                        usage[log_user] = (usage_tuple[0]+1, usage_tuple[1])
                else:
                    if log_type == 'ERROR':
                        usage[log_user] = (0, 1)
                    else:
                        usage[log_user] = (1, 0)

    return {"errors": errors, "usage": usage}


def orderErrors(errors):
    sorted_errors = []
    for error_tuple in sorted(errors.items(), key = operator.itemgetter(1), reverse=True):
        sorted_errors.append({ "Error": error_tuple[0], "Count" : error_tuple[1]})
    return sorted_errors


def orderUsage(usages):
    sorted_usage = []
    for usage_tuple in sorted(usages.items(), key=operator.itemgetter(0)):
        sorted_usage.append({ "Username": usage_tuple[0], "INFO": usage_tuple[1][0], "ERROR": usage_tuple[1][1]})
    return sorted_usage


# Generating CSV files
def save_data_on_csv(data_list, file_name, keys):
    with open(file_name, "w") as new_csv:
        writer = csv.DictWriter(new_csv, fieldnames=keys)
        writer.writeheader()
        writer.writerows(data_list)


# Write a script to generate two different reports based 
# on the ranking of errors generated by the system and the 
# user usage statistics for the service. Two dictionaries.
def main():
    # parse logs
    parsed_logs = logParsing()

    # order logs
    ordered_errors = orderErrors(parsed_logs["errors"])
    ordered_usage = orderUsage(parsed_logs["usage"])

    # generate reports
    save_data_on_csv(ordered_errors, "error_message.csv", ["Error", "Count"])
    save_data_on_csv(ordered_usage, "user_statistics.csv", ["Username", "INFO", "ERROR"])
    
    
main()

# TODO: WRITE BASH SCRIPT TO PASS GENERATED CSV FILES TO THE csv_to_html.py SCRIPT, i.e. Visualize reports SECTION
 